// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmokeTestDataImport.Data;

#nullable disable

namespace SmokeTestDataImport.Migrations
{
    [DbContext(typeof(SmokeTestingDbContext))]
    [Migration("20230818214034_UpdateGpsTimeToString")]
    partial class UpdateGpsTimeToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmokeTestDataImport.Models.SmokeDefect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaPhoto")
                        .HasColumnType("integer");

                    b.Property<string>("CrewLeade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefectTyp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DrainageA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Easting")
                        .HasColumnType("real");

                    b.Property<int?>("ExtraPho2")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtraPho3")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtraPhot")
                        .HasColumnType("integer");

                    b.Property<string>("GeneralC2")
                        .HasColumnType("text");

                    b.Property<string>("GeneralC3")
                        .HasColumnType("text");

                    b.Property<string>("GeneralCo")
                        .HasColumnType("text");

                    b.Property<float>("GnssHeigh")
                        .HasColumnType("real");

                    b.Property<DateOnly>("GpsDate")
                        .HasColumnType("date");

                    b.Property<string>("GpsTime")
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Northing")
                        .HasColumnType("real");

                    b.Property<double?>("OffsetBea")
                        .HasColumnType("double precision");

                    b.Property<double?>("OffsetDis")
                        .HasColumnType("double precision");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<string>("RunoffPot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SmokeRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurfaceCo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UniqueId")
                        .HasColumnType("integer");

                    b.Property<int>("ZoomPhoto")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SmokeDefects");
                });
#pragma warning restore 612, 618
        }
    }
}
